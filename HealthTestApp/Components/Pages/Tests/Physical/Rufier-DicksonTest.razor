@page "/tests/ruffier-dickson"
@rendermode InteractiveServer
@attribute [Authorize]

@using HealthTestApp.Data.DTOs
@using HealthTestApp.Data.Models
@using HealthTestApp.Service
@using HealthTestApp.Service.TestServices
@using Microsoft.AspNetCore.Authorization
@using HealthTestApp.Components.Pages.Tests.TestComponents

@inject LayoutState LayoutState
@inject RuffierDicksonTestService TestService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@layout HealthTestApp.Components.Layout.MainLayout

<PageTitle>Ruffier-Dickson Test</PageTitle>

<div class="shell">
    <div class="test-container">

        <div style="display: flex; justify-content: center;">
            <div class="test-progress">
                <div class="progress-bar" style="width: @(currentStep == 1 ? "20%" : currentStep == 2 ? "40%" : currentStep == 3 ? "60%" : currentStep == 4 ? "80%" : "100%")"></div>
                <div style="display: flex; justify-content: center;">Step @currentStep of 5</div>
            </div>
        </div>
        @if(currentStep == 1)
        {

            <p class="text-lg mb-6">
                The Ruffier-Dickson Test is a quick and reliable way to assess your heart’s recovery ability 
                and overall cardiovascular fitness. It helps determine how efficiently your heart responds to 
                physical exertion and how quickly it returns to its resting state.
                Often used in fitness and wellness assessments, this test gives valuable insight into your endurance level 
                and can help track improvements over time. It's a practical tool for anyone looking to monitor their heart 
                health and physical condition
                The test takes your heart rate and blood pressure to measure the wellbeing of your heart and it's vessels.
            </p>
            <div class="photo-container">
                <img src="Images\TestsImages\Ruffier-Dickson-Test.svg" class="test-photo">
            </div>

            <div class="discription-container">
                <h3 class="subtitle">How it works:</h3>
                <ol class="list-decimal ml-5 space-y-1">
                    <li>Measure your resting pulse and blood pressure <strong class="bold-text">3 times</strong>.</li>
                    <li>Do squats for <strong class="bold-text">45 seconds</strong>.</li>
                    <li>Immediately measure your pulse and blood pressure <strong class="bold-text">5 times</strong></li>
                </ol>
            </div>
            <div class="discription-container">
                <h3 class="subtitle">Time to complete:</h3>
                <p>The test takes around <strong class="bold-text">10 minutes</strong> to complete</p>
            </div>
            <Button Color="#632FFF" Text="Start" OnClick="() => currentStep = 2"></Button>

        }
        else if(currentStep == 2)
        {
            
            <br />
            <h2 style="font-weight: bold; color: #404040; margin-bottom: 20px; text-align: center;">Step 1: Measure your Heart rate and Blood pressure <span class="bold-text"> 3 times</span></h2>
            k = 0;

            <p style="text-align: center;">
                Firstly you need to measure your heart rate and blood pressure in a resting and comfortable for you position.
                Please refrain from moving while doing the measure to insure optimal measurements.</p>
            @if(ErrorMessage is not null)
            {
                <p style="color: red; text-align: center;">@ErrorMessage</p>
            }
            <div class="measure-container">
                <div class="input-container">
                    <Input  Placeholder="Weight" 
                    @bind-Value="Weight"
                    Type="number"
                    Minimum="0"
                    Label="Your weight (in kilograms / kg):"/>
                </div>
            </div>
            @foreach (var measure in measurementEntries1)  // Loop over the three measurements
            {
                <div class="measure-container">
                    <h3>Measure @(k + 1)</h3>
                    <div class="blood-pressure-container">
                        <div class="input-container">
                            <Input Placeholder="Systolic (Up)"
                            @bind-Value="@measure.Systolic"
                            Type="number"
                            Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Diastolic (Down)"
                            @bind-Value="@measure.Diastolic"
                            Type="number"
                            Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Heart Rate"
                            @bind-Value="@measure.HeartRate"
                            Type="number"
                            Minimum="0" />
                        </div>
                    </div>
                </div>
                k++;
            }
            <p style="opacity: 0.6; text-align: center;">
                <i>Help: The Systolic is the upper value of your blood pressure (If you have 120:80, the systolic is 120), and Diastolic is the lower number (in our case 80).</i>
            </p>
            <div style="display: flex; justify-content: center;">
                <div style="display: flex; justify-content: space-between; flex: 1; max-width: 500px;">
                    <Button Color="#632FFF" Text="Previous" OnClick="() => currentStep--"></Button>
                    <Button Color="#632FFF" Text="Next" OnClick="() => currentStep++"></Button>
                </div>
            </div>


        }
        else if (currentStep == 3)
        {
            <br />
            <h2 style="font-weight: bold; color: #404040; margin-bottom: 20px; text-align: center;">Step 2: Do squats for <span class="bold-text"> 45 seconds</span></h2>
            <p style="text-align: center;">Start the timer and do as much squats as your can for 45 seconds. If you have a analog blood pressure monitor, do not remove it from your arm if you can.</p>

            //TO DO: MAKE IT PLAY AN ALARM AT FINISH
            <div class="timer-container">
                <div class="timer-shell">
                    <div style="display: flex; justify-content: center;">
                        <Timer @ref="timer" Seconds="45" OnFinished="OnTimerFinished" />
                    </div>


                    <div class="timer-button-container">
                        <button @onclick="StartTimer" disabled="@timer?.IsRunning">Start</button>
                        <button @onclick="PauseTimer" disabled="@(!timer?.IsRunning ?? true)">Pause</button>
                        <button @onclick="ResumeTimer" disabled="@(timer?.IsRunning ?? false)">Resume</button>
                    </div>
                </div>
            </div>
            <div style="display: flex; justify-content: center;">
                <div style="display: flex; justify-content: space-between; flex: 1; max-width: 500px;">
                    <Button Color="#632FFF" Text="Previous" OnClick="() => currentStep--"></Button>
                    <Button Color="#632FFF" Text="Next" OnClick="() => currentStep++"></Button>
                </div>
            </div>

        }
        else if(currentStep == 4)
        {
            <br />
            <h2 style="font-weight: bold; color: #404040; margin-bottom: 20px; text-align: center;">Step 3: Measure your Heart rate and Blood pressure <span class="bold-text"> 5 times</span></h2>
            k = 3;
            <p style="text-align: center;">Last step! Now monitor your blood pressure and heart rate another 5 times without resting from the squats.</p>
            @if (ErrorMessage is not null)
            {
                <p style="color: red; text-align: center;">@ErrorMessage</p>
            }
            @foreach (var measure in measurementEntries2)  // Loop over the three measurements
            {
                <div class="measure-container">
                    <h3>Measure @(k + 1)</h3>
                    <div class="blood-pressure-container">
                        <div class="input-container">
                            <Input Placeholder="Systolic (Up)"
                            @bind-Value="@measure.Systolic"
                            Type="number"
                            Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Diastolic (Down)"
                            @bind-Value="@measure.Diastolic"
                            Type="number"
                            Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Heart Rate"
                            @bind-Value="@measure.HeartRate"
                            Type="number"
                            Minimum="0" />
                        </div>
                    </div>
                </div>
                k++;
            }
            <p style="opacity: 0.6; text-align: center;">
                <i>Help: The Systolic is the upper value of your blood pressure (If you have 120:80, the systolic is 120), and Diastolic is the lower number (in our case 80).</i>
            </p>
            <div style="display: flex; justify-content: center;">
                <div style="display: flex; justify-content: space-between; flex: 1; max-width: 500px;">
                    <Button Color="#632FFF" Text="Previous" OnClick="() => currentStep--"></Button>
                    <Button Color="#632FFF" Text="Finish" OnClick="OnFinish"></Button>
                </div>
            </div>

        }

        else if (currentStep == 5)
        {
            <h2 class="heart-result-header">Your heart recovery is: <span style="color: @HeartResultColor">@HeartInterception</span> &</h2>
            <h2 class="heart-result-header">Your blood vessels hardness is: <span style="color: @VesselResultColor">@VesselInterception</span> </h2>
            <p class="heart-result">Your heart score: <strong style="color: #2790FF">@HeartIndex</strong></p>
            <p class="heart-result">Your vessel score: <strong class="bold-text">@(Math.Round(VesselScore, 2))</strong></p>
            <p>@HeartMessage</p>
            <p>@VesselMessage</p>

            <div class="table-container">
                <div style="overflow: hidden; border-radius: 20px; box-shadow: 0 4px 12px #D4DAEE; display: inline-block;">
                    <table cellpadding="10" style="border-collapse: collapse; text-align: center; background-color: white;">
                        <thead style="background-color: #2790FF; color: white;">
                            <tr>
                                <th>Heart Recovery Index</th>
                                <th>Interpretation</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>0 – 5</td>
                                <td>Excellent</td>
                            </tr>
                            <tr>
                                <td>6 – 10</td>
                                <td>Good</td>
                            </tr>
                            <tr>
                                <td>11 – 15</td>
                                <td>Satisfactory</td>
                            </tr>
                            <tr>
                                <td>16 – 20</td>
                                <td>Weak</td>
                            </tr>
                            <tr>
                                <td>21 and above</td>
                                <td>Very Poor</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="overflow: hidden; border-radius: 20px; box-shadow: 0 4px 12px #D4DAEE; display: inline-block; margin-left: 2rem;">
                    <table cellpadding="10" style="border-collapse: collapse; text-align: center; background-color: white;">
                        <thead style="background-color: #632FFF; color: white;">
                            <tr>
                                <th>Blood Vessel Hardness Index</th>
                                <th>Interpretation</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>less than 30</td>
                                <td>Too low</td>
                            </tr>
                            <tr>
                                <td>30 - 50</td>
                                <td>Normal</td>
                            </tr>
                            <tr>
                                <td>50 and above</td>
                                <td>Hard vessels</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <br />
            <h3 class ="heart-result-header">Heart Recovery Diagram</h3>
            <Chart Data1="@TestData.AveragePowers" Data2="TestData.TotalWorks"/>

            <br/>

            <div style="display: flex; justify-content: center;">
                <Button Text="Finish Test" Color="#632FFF" OnClick="OnSave" />
            </div>
        }
    </div>

</div>

@code {
    private RuffierDicksonTestData TestData = new();
    MeasurementEntry[] measurementEntries1 = new MeasurementEntry[3];
    MeasurementEntry[] measurementEntries2 = new MeasurementEntry[5];
    private string Weight = string.Empty;
    private double UserWeight;
    private int currentStep = 1;
    private const int bloodDensity = 1050;
    private const double bloodSpeed = 0.5;
    private const double strokeVolumeMl = 60;
    private double strokeVolumeM3;
    private int k;
    private Timer? timer;
    private double HeartIndex;
    private string value = "";
    private string? ErrorMessage;
    private string? ErrorSaveMessage;
    private double VesselScore;
    private string HeartInterception = string.Empty;
    private string HeartResultColor = string.Empty;
    private string HeartMessage = string.Empty;
    private string VesselInterception = string.Empty;
    private string VesselResultColor = string.Empty;
    private string VesselMessage = string.Empty;

    private void StartTimer() => timer?.Start();
    private void PauseTimer() => timer?.Pause();
    private void ResumeTimer() => timer?.Resume();

    private void OnTimerFinished()
    {
        Console.WriteLine("Timer finished!");
    }
    protected override void OnInitialized()
    {
        LayoutState.SetLayout("Ruffier-Dickson Test", "Physical");
        for (int i = 0; i < 3; i++)
        {
            measurementEntries1[i] = new MeasurementEntry();
        }
        for (int i = 0; i < 5; i++)
        {
            measurementEntries2[i] = new MeasurementEntry();
        }
    }
    void Clicked()
    {
        currentStep++;
    }
    private void CalculateForEntry(int i)
    {
        var entry = TestData.Measurements[i];
        TestData.BloodPressureMedians[i] = double.Parse(entry.Systolic) - double.Parse(entry.Diastolic);
        TestData.CardiacDurations[i].CardiacCycleDurationSeconds = 60 / double.Parse(entry.HeartRate);
        TestData.CardiacDurations[i].SystoleDurationSeconds = TestData.CardiacDurations[i].CardiacCycleDurationSeconds / 3;
        TestData.PulsePressures[i] = (double.Parse(entry.Systolic) + double.Parse(entry.Diastolic)) / 2;
        TestData.EjectedBloodMasses[i] = 0.7 * UserWeight * 1000 / double.Parse(entry.HeartRate);
        TestData.ExternalWorks[i] = strokeVolumeM3 * TestData.PulsePressures[i] * 133;
        TestData.KineticWorks[i] = (bloodDensity * strokeVolumeM3 * bloodSpeed * bloodSpeed) / 2;
        TestData.TotalWorks[i] = 1.2 * (TestData.ExternalWorks[i] + TestData.KineticWorks[i]);
        TestData.AveragePowers[i] = TestData.TotalWorks[i] / TestData.CardiacDurations[i].CardiacCycleDurationSeconds;
    }
    private bool ValidateInputs(List<MeasurementEntry> entries)
    {
        foreach (var entry in entries)
        {
            if (string.IsNullOrWhiteSpace(entry.Diastolic)
                || string.IsNullOrWhiteSpace(entry.Systolic)
                || string.IsNullOrWhiteSpace(entry.HeartRate))
            {
                ErrorMessage = "One or more of the input fields is empty. Please fill them out.";
                return false;
            }
        }
        return true;
    }
    private void OnFinish()
    {
        strokeVolumeM3 = strokeVolumeMl * 1e-6;
        if (string.IsNullOrWhiteSpace(Weight))
        {
            ErrorMessage = "Please write your weight to view your results!";
            return;
        }
        if (!ValidateInputs(measurementEntries1.ToList()) || !ValidateInputs(measurementEntries2.ToList()))
            return;
        UserWeight = double.Parse(Weight);
        for (int i = 0; i < 3; i++)
        {
            TestData.Measurements[i] = measurementEntries1[i];
            CalculateForEntry(i);

        }
        for (int i = 0; i < 5; i++)
        {
            TestData.Measurements[i + 3] = measurementEntries2[i];
            CalculateForEntry(i + 3);
        }

        TestData.Medians[0] = (int.Parse(TestData.Measurements[0].HeartRate) 
                                + int.Parse(TestData.Measurements[1].HeartRate) 
                                + int.Parse(TestData.Measurements[2].HeartRate)) / 3;
        TestData.Medians[1] = (int.Parse(TestData.Measurements[3].HeartRate) 
                                + int.Parse(TestData.Measurements[4].HeartRate) 
                                + int.Parse(TestData.Measurements[5].HeartRate)) / 3;
        TestData.Medians[2] = int.Parse(TestData.Measurements[7].HeartRate);

        HeartIndex = (TestData.Medians[0] + TestData.Medians[1] + TestData.Medians[2] - 200) / 10;
        VesselScore = (TestData.BloodPressureMedians[0] + TestData.BloodPressureMedians[1] + TestData.BloodPressureMedians[2]) / 3;

        TestData.Outputs["Heart Score"] = HeartIndex;
        TestData.Outputs["Blood Vessel Health"] = VesselScore;

        if (HeartIndex >= 1 && HeartIndex <= 5)
        {
            HeartInterception = "Excellent";
            HeartResultColor = "#00c853";
            HeartMessage = "You have excellent heart recovery! Your cardiovascular system is in top shape, showing efficient heart performance and strong physical endurance. Keep maintaining your healthy lifestyle—your heart thanks you!"; 
        }
        else if (HeartIndex > 5 && HeartIndex <= 10)
        {
            HeartInterception = "Good";
            HeartResultColor = "#64dd17";
            HeartMessage = "You have good heart recovery.Your cardiovascular fitness is above average, which means your heart copes well with physical stress. With a bit more training or activity, you could reach the excellent range!";
        }
        else if (HeartIndex > 10 && HeartIndex <= 15)
        {
            HeartInterception = "Satisfactory";
            HeartResultColor = "#FFD600";
            HeartMessage = "Your heart recovery is satisfactory. While your results are within normal limits, there’s room for improvement. Consider regular aerobic exercise and healthy habits to boost your cardiovascular health.";
        }
        else if (HeartIndex > 15 && HeartIndex <= 20)
        {
            HeartInterception = "Weak";
            HeartResultColor = "#FF6D00";
            HeartMessage = "Your heart recovery is below average. This may indicate that your cardiovascular system is under some strain. It might be a good time to introduce consistent physical activity and possibly consult with a healthcare provider for personalized advice.";

        }
        else if (HeartIndex > 20)
        {
            HeartInterception = "Very Poor";
            HeartResultColor = "#D50000";
            HeartMessage = "Your heart recovery is very poor. Your heart may be having a hard time adapting to physical effort. Please consider reaching out to a healthcare professional to evaluate your cardiovascular health and receive guidance on next steps.";
        }
        if (VesselScore < 30)
        {
            VesselInterception = "Too low";
            VesselResultColor = "#FF6D00";
            VesselMessage = "Your blood vessel elasticity is unusually high. While flexibility is good, this level might indicate abnormally low vascular tone. It’s recommended to monitor your blood pressure regularly and speak with a healthcare provider to ensure everything is functioning properly.";
        }
        else if (VesselScore >= 30 && VesselScore <= 50)
        {
            VesselInterception = "Normal";
            VesselResultColor = "#00c853";
            VesselMessage = "You have a normal blood vessel health index! Your vascular system is functioning as expected, with good elasticity and resistance. Keep up your healthy lifestyle to maintain this balance!";
        }
        else if (VesselScore > 50)
        {
            VesselInterception = "Too high";
            VesselResultColor = "#D50000";
            VesselMessage = "Your results suggest increased blood vessel stiffness. This may point to reduced elasticity, which can put extra strain on your heart. Consider speaking with a medical professional about lifestyle changes or further testing to support your cardiovascular health.";
        }
        currentStep++;
    }
    private async Task OnSave()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdString = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        ResultDto result = new();
        if (Guid.TryParse(userIdString, out Guid userId))
        {
            result =  await TestService.SaveTestAsync(userId, TestData);
        }
        if (!result.IsValid)
        {
            ErrorSaveMessage = result.Message;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

    }
}
