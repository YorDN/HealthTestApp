@using HealthTestApp.Data.Models
@using HealthTestApp.Service
@using Microsoft.AspNetCore.Authorization
@using HealthTestApp.Components.Pages.Tests.TestComponents
@rendermode InteractiveServer
@inject LayoutState LayoutState
@* @attribute [Authorize] *@
@page "/tests/ruffier-dickson"
@layout HealthTestApp.Components.Layout.MainLayout

<PageTitle>Ruffier-Dickson Test</PageTitle>

<div class="shell">
    <div class="test-container">
        @if(currentStep == 1)
        {

            <p class="text-lg mb-6">
                The Ruffier-Dickson Test is a quick and reliable way to assess your heart’s recovery ability 
                and overall cardiovascular fitness. It helps determine how efficiently your heart responds to 
                physical exertion and how quickly it returns to its resting state.
                Often used in fitness and wellness assessments, this test gives valuable insight into your endurance level 
                and can help track improvements over time. It's a practical tool for anyone looking to monitor their heart 
                health and physical condition
                The test takes your heart rate and blood pressure to measure the wellbeing of your heart and it's vessels.
            </p>
            <div class="photo-container">
                <img src="Images\TestsImages\Ruffier-Dickson-Test.svg" class="test-photo">
            </div>

            <div class="discription-container">
                <h3 class="subtitle">How it works:</h3>
                <ol class="list-decimal ml-5 space-y-1">
                    <li>Measure your resting pulse and blood pressure <strong class="bold-text">3 times</strong>.</li>
                    <li>Do squats for <strong class="bold-text">45 seconds</strong>.</li>
                    <li>Immediately measure your pulse and blood pressure <strong class="bold-text">5 times</strong></li>
                </ol>
            </div>
            <div class="discription-container">
                <h3 class="subtitle">Time to complete:</h3>
                <p>The test takes around <strong class="bold-text">10 minutes</strong> to complete</p>
            </div>
            <Button Color="#632FFF" Text="Start" OnClick="() => currentStep = 2"></Button>

        }
        else if(currentStep == 2)
        {
            <StepProgress CurrentStep="1" TotalSteps="3"
            FilledColor="#632FFF"
            UnfilledColor="lightgray" />
            <br />
            <h2 style="font-weight: bold; color: #404040; margin-bottom: 20px; text-align: center;">Step 1: Measure your Heart rate and Blood pressure <span class="bold-text"> 3 times</span></h2>
            k = 0;

            <p style="text-align: center;">
                Firstly you need to measure your heart rate and blood pressure in a resting and comfortable for you position.
                Please refrain from moving while doing the measure to insure optimal measurements.</p>
            @foreach (var measure in measurementEntries1)  // Loop over the three measurements
            {
                <div class="measure-container">
                    <h3>Measure @(k + 1)</h3>
                    <div class="blood-pressure-container">
                        <div class="input-container">
                            <Input Placeholder="Systolic (Up)"
                            @bind-Value="@measure.Systolic"
                            Type="number"
                            Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Diastolic (Down)"
                            @bind-Value="@measure.Diastolic"
                            Type="number"
                            Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Heart Rate"
                            @bind-Value="@measure.HeartRate"
                            Type="number"
                            Minimum="0" />
                        </div>
                    </div>
                </div>
                k++;
            }
            <p style="opacity: 0.6; text-align: center;">
                <i>Help: The Systolic is the upper value of your blood pressure (If you have 120:80, the systolic is 120), and Diastolic is the lower number (in our case 80).</i>
            </p>
            <div style="display: flex; justify-content: center;">
                <div style="display: flex; justify-content: space-between; flex: 1; max-width: 500px;">
                    <Button Color="#632FFF" Text="Previous" OnClick="() => currentStep--"></Button>
                    <Button Color="#632FFF" Text="Next" OnClick="() => currentStep++"></Button>
                </div>
            </div>


        }
        else if (currentStep == 3)
        {
            <StepProgress CurrentStep="2" TotalSteps="3"
            FilledColor="#632FFF"
            UnfilledColor="lightgray" />
            <br />
            <h2 style="font-weight: bold; color: #404040; margin-bottom: 20px; text-align: center;">Step 2: Do squats for <span class="bold-text"> 45 seconds</span></h2>
            <p style="text-align: center;">Start the timer and do as much squats as your can for 45 seconds. If you have a analog blood pressure monitor, do not remove it from your arm if you can.</p>
            
            //TO DO: MAKE IT PLAY AN ALARM AT FINISH
            <div class="timer-container">
                <div class="timer-shell">
                    <div style="display: flex; justify-content: center;">
                        <Timer @ref="timer" Seconds="45" OnFinished="OnTimerFinished" />
                    </div>


                    <div class="timer-button-container">
                        <button @onclick="StartTimer" disabled="@timer?.IsRunning">Start</button>
                        <button @onclick="PauseTimer" disabled="@(!timer?.IsRunning ?? true)">Pause</button>
                        <button @onclick="ResumeTimer" disabled="@(timer?.IsRunning ?? false)">Resume</button>
                    </div>
                </div>
            </div>
            <div style="display: flex; justify-content: center;">
                <div style="display: flex; justify-content: space-between; flex: 1; max-width: 500px;">
                    <Button Color="#632FFF" Text="Previous" OnClick="() => currentStep--"></Button>
                    <Button Color="#632FFF" Text="Next" OnClick="() => currentStep++"></Button>
                </div>
            </div>

        }
        else if(currentStep == 4)
        {
            <StepProgress CurrentStep="3" TotalSteps="3"
            FilledColor="#632FFF"
            UnfilledColor="lightgray" />
            <br />
            <h2 style="font-weight: bold; color: #404040; margin-bottom: 20px; text-align: center;">Step 3: Measure your Heart rate and Blood pressure <span class="bold-text"> 5 times</span></h2>
            k = 3;
            <p style="text-align: center;">Last step! Now monitor your blood pressure and heart rate another 5 times without resting from the squats.</p>
            @foreach (var measure in measurementEntries2)  // Loop over the three measurements
            {
                <div class="measure-container">
                    <h3>Measure @(k + 1)</h3>
                    <div class="blood-pressure-container">
                        <div class="input-container">
                            <Input Placeholder="Systolic (Up)"
                                   @bind-Value="@measure.Systolic"
                                   Type="number"
                                   Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Diastolic (Down)"
                                   @bind-Value="@measure.Diastolic"
                                   Type="number"
                                   Minimum="0" />
                        </div>
                        <div class="input-container">
                            <Input Placeholder="Heart Rate"
                                   @bind-Value="@measure.HeartRate"
                                   Type="number"
                                   Minimum="0" />
                        </div>
                    </div>
                </div>
                k++;
            }
            <p style="opacity: 0.6; text-align: center;">
                <i>Help: The Systolic is the upper value of your blood pressure (If you have 120:80, the systolic is 120), and Diastolic is the lower number (in our case 80).</i>
            </p>
            <div style="display: flex; justify-content: center;">
                <div style="display: flex; justify-content: space-between; flex: 1; max-width: 500px;">
                    <Button Color="#632FFF" Text="Previous" OnClick="() => currentStep--"></Button>
                    <Button Color="#632FFF" Text="Finish" OnClick="OnFinish"></Button>
                </div>
            </div>

        }
    </div>

</div>

@code {
    private RuffierDicksonTestData TestData = new();
    MeasurementEntry[] measurementEntries1 = new MeasurementEntry[3];
    MeasurementEntry[] measurementEntries2 = new MeasurementEntry[5];
    private int currentStep = 1;
    private int k;
    private Timer? timer;
    private double Index;
    private string value = "";

    private void StartTimer() => timer?.Start();
    private void PauseTimer() => timer?.Pause();
    private void ResumeTimer() => timer?.Resume();

    private void OnTimerFinished()
    {
        Console.WriteLine("Timer finished!");
    }
    protected override void OnInitialized()
    {
        LayoutState.SetLayout("Ruffier-Dickson Test", "Physical");
        for (int i = 0; i < 3; i++)
        {
            measurementEntries1[i] = new MeasurementEntry();
        }
        for (int i = 0; i < 5; i++)
        {
            measurementEntries2[i] = new MeasurementEntry();
        }
    }
    void Clicked()
    {
        currentStep++;
    }
    private void OnFinish()
    {
        // Index = ((P1 + P2 + P3) - 200) / 10.0;

        // if (Index <= 5)
        //     Interpretation = "🟢 Excellent";
        // else if (Index <= 10)
        //     Interpretation = "🟢 Good";
        // else if (Index <= 15)
        //     Interpretation = "🟡 Satisfactory";
        // else if (Index <= 20)
        //     Interpretation = "🟠 Weak";
        // else
        //     Interpretation = "🔴 Very Poor";

        TestData.Medians[0] = (int.Parse(TestData.Measurements[0].HeartRate) + int.Parse(TestData.Measurements[1].HeartRate) + int.Parse(TestData.Measurements[2].HeartRate)) / 3;
        TestData.Medians[1] = (int.Parse(TestData.Measurements[3].HeartRate) + int.Parse(TestData.Measurements[4].HeartRate) + int.Parse(TestData.Measurements[5].HeartRate)) / 3;
        TestData.Medians[2] = int.Parse(TestData.Measurements[7].HeartRate);
        Index = (TestData.Medians[0] + TestData.Medians[1] + TestData.Medians[2] - 200) / 10;
    }
}
